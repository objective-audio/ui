#pragma once

#include <string>

namespace yas::ui {
static const char *const shaderText =
    "#include <simd/simd.h>\n"
    "#include <metal_stdlib>\n"
    "\n"
    "namespace yas {\n"
    "namespace ui {\n"
    "    struct vertex2d_t final {\n"
    "        simd::float2 position = 0.0f;\n"
    "        simd::float2 tex_coord = 0.0f;\n"
    "        simd::float4 color = 1.0f;\n"
    "    };\n"
    "\n"
    "    struct uniforms2d_t final {\n"
    "        simd::float4x4 matrix;\n"
    "        simd::float4 color = 1.0f;\n"
    "        bool use_mesh_color = false;\n"
    "    };\n"
    "}\n"
    "}\n"
    "\n"
    "using namespace metal;\n"
    "using namespace yas;\n"
    "\n"
    "struct color_inout2d {\n"
    "    float4 position[[position]];\n"
    "    float4 color;\n"
    "    float2 tex_coord[[user(texturecoord)]];\n"
    "};\n"
    "\n"
    "struct inputs {\n"
    "    texture2d<float> tex2D;\n"
    "    sampler sampler2D;\n"
    "};\n"
    "\n"
    "vertex color_inout2d vertex2d(device ui::vertex2d_t const *vertex_array[[buffer(0)]],\n"
    "                              constant ui::uniforms2d_t &uniforms[[buffer(1)]], unsigned int vid[[vertex_id]]) {\n"
    "    color_inout2d out;\n"
    "\n"
    "    out.position = uniforms.matrix * float4(float2(vertex_array[vid].position), 0.0, 1.0);\n"
    "    out.color = uniforms.use_mesh_color ? vertex_array[vid].color * uniforms.color : uniforms.color;\n"
    "    out.tex_coord = vertex_array[vid].tex_coord;\n"
    "\n"
    "    return out;\n"
    "}\n"
    "\n"
    "fragment float4 fragment2d_with_texture(color_inout2d in[[stage_in]], constant inputs &inputs[[buffer(0)]]) {\n"
    "    return inputs.tex2D.sample(inputs.sampler2D, in.tex_coord) * in.color * float4(float3(in.color.a), 1.0);\n"
    "}\n"
    "\n"
    "fragment float4 fragment2d_without_texture(color_inout2d in[[stage_in]]) {\n"
    "    return in.color * float4(float3(in.color.a), 1.0);\n"
    "}\n";
}
